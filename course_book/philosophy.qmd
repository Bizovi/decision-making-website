---
title: "Course philosophy"
author:
  - name: Mihai Bizovi
    id: mb
    degrees: 
    - "VP of Decision Science"
format:
  html:
    toc-location: left
---



## On Interdisciplinarity

Decision science is by definition interdisciplinary, which makes studying it challenging, interesting, and rewarding. We will need to borrow ideas, models, and techniques from probability, statistics, causal inference, machine learning, optimization, economics, cognitive science, etc. This means jumping through many fields, which we'll call aspects or "buckets". 

::: {.callout-warning}
## The danger of thinking in buckets

Our brains think about stuff by creating boundaries, i.e. ‘buckets' around ideas. These buckets can influence our memory, language, behavior, and ability to see the ‘big picture’. ^[I first encountered this idea in one of R. Sapolsky's [lectures](https://youtu.be/NNnIGh9g6fA) / [notes](https://alexvermeer.com/human-behavioral-biology-01-introduction/) and it had a huge impact on the way I look at science.]


- An implication of our bucketing minds is that we are **bad at differentiating** facts that fall within the same category. Two shades of red are labelled ‘red’.
- A larger consequence is that when we focus on categories while talking about behavior, we tend to **exagerrate differences** and lose out on the big picture
- It’s easy to see a single one of these categories as providing The Explanation. But they are merely various "behavior buckets". They are all a part of the big picture explanation.
- It is an easy trap to fall into. Flawed bucket thinking has been done by many of the most influential scientists in history, sometimes, with catastrophic consequences.

A major goal is not to fall for bucket thinking – we must resist the temptation to find "The Explanation" in one bucket. Robert Sapolsky explains behavior in terms of evolution, neuroscience, molecular genetics, ethology, etc. 
:::

Imagine we're exploring a map by travelling through various islands and familiar / unknown places. Sometimes, we'll take a little detour for a fun fact, other times we need to settle for a while and master a craft. Maybe, it's not enough to talk to locals, but we have to live among them in order to understand their challenges. If we don't have a map and guide, we might not be even aware that we're missing important knowledge and understanding from an unexplored place. Here are our destinations:

**Problem space** is the land of challenges. Our goal here is to understand the domain where we have to make decisions, figure out how to improve relevant outcomes for clients and stakeholders. There is much uncertainty here, questions about what will happen and how should we act. It's the real world, seen as a Complex Adaptive System. I will explain what this means in the next section. This is where we get our data from and who we build software for! Also known in a narrow sense as scope.

<!-- - Be it in firms, economics, and finance
- Be it in biology and life sciences
- Be it in engineering systems  -->


- **Science**, especially **cognitive science**, which will give us insights about our intelligence, rationality, wisdom, foolishness, and biases. This is the place where we'll get the process/method, learn how to observe, formulate scientific hypotheses, use theories, and causal models to make predictions and perform experiments. 
- In **probability**, we reason about uncertainty in the real world, build narratives and tell stories with DAGs of random variables, which are prague golemns, little robots generating data. In the happy case they match the theoretical models and result in plausible patterns. We'll spend much time simulating phenomena, being the masters of these alternative multiverses. 
- In **statistics**, we change our minds and actions in the face of evidence. We learn the skills of exploratory data analysis, experiment design, and causal inference. Why build models? To make better decisions, of course.
- **Machine Learning** and Deep Learning, the younger tribes of statistics are the future: they learn from data and when things go well, make reliable and robust predictions, in order to optimize the heck out of any process. Think of them as shamans or oracles, who sometimes overfit, therefore are prone to acting foolishly.
- We come back to the homeland of many of you: **computer science** and software engineering, the place where nowadays everything on this map becomes reality. We will learn how to build full-stack, data-driven software, good practices of the guild. While spending time here, an appreciation for the contribution of CS to all other places we already visited will become obvious.
- It is all overseen by **philosophy**. Some things don't change.
- Ah! We forgot about **mathematics**. It is everywhere, but also stands proud on its own. It is an essential prerequisite for everything we do, however, it is hard to do rigorous mathematics in the setup we outlined, as it will take a decade. The good news is -- we will be fine just with the starter pack!



::: {.column-margin}
![We will take short trips in the fields outlined below. *(Source: Generated with DALL-E)*](img/map_dsc.png)
:::


## Cybernetics and AI

What is cybernetics and how is it relevant to the course philosophy? Does it have something to do with robotics or cybersecurity? Not really. It is studying complex adaptive systems (CAS) and is very close to what we call today weak or specialized AI.

The term comes from greek *(kybernetes)* -- to steer towards a desired outcome or trajectory. It highlights the aspects of agency, action, pattern recognition, and prediction. Does the idea of "decision-making under uncertainty at scale" ring a bell?

::: {.callout-tip}
## Unpacking the definition of Cybernetics

The science of **general regularities** of **control** and **information processing** in animals, machines, and humans ^[There are many definitions of Cybernetics, but I find this one by  P. Novikov to be the most useful for us]


- **Control** means goal-directedness, the ability to solve problems and achieve objectives by taking action and stirring the system towards a trajectory. The goal can also be perserving the structural-functional organization of the system itself, an autopoesis.
- **Information processing** can be interpreted as pattern recoginition, perception, how you understand and model the world, what inferences do you draw based on "data inputs"
- **General regularities** means what is true and plausible of control and information processing across fields and a variety of complex systems, not only in particular cases.
- Animal refers to applications in biology, machine -- in engineering, and human -- in our society and behavior.

When applied to economics, cybernetics is ultimately concerned with human behavior. It views consumers, households, firms, institutions, markets, and countries as complex adaptive systems.

:::

If we are to put **decision science** on a philosophical foundation, ideas from cybernetics, cognitive science, scientific process (philosophy of science), and ethics should be included. I don't do this for the sake of rigor, but because it is an useful way of thinking in practice. These four aspects appear again and again in my teaching and applications. 

Perhaps, the most valuable skill from studying cybernetics is the ability to **think in systems** and bring clarity in messy, dynamic problems. I will not use any of its theory or tools, but it justifies and informs the way I put decision science in a larger context.

::: {.callout-important}
## Cybernetics and the history of AI

I highly recommend that you stop here and read two brilliant interviews by Michael I. Jordan, in which he tells the story of how the meaning of AI changed throughout the decades and what role did Cybernetics play:

- [Stop Calling Everything AI](https://spectrum-ieee-org.cdn.ampproject.org/c/s/spectrum.ieee.org/amp/stop-calling-everything-ai-machinelearning-pioneer-says-2652904044), Machine-Learning Pioneer Says 
-  [Artificial  Intelligence](https://hdsr.mitpress.mit.edu/pub/wot7mkc1/release/9): The Revolution Hasn’t Happened Yet
:::


## Four principles for teaching

Let's go back to the burning question: **what I wish I had in a course?** It is hard to teach these topics in a way which is both theoretically sound and can be immediately applied. After recognizing that there is no silver bullet, my conclusion is that following the principles outlined below consistently, dramatically increases the chances of preparing a new generation ready to tackle the messy, ill-defined problems we encounter.

- Provide motivation for **why** something is important (a field, theory, model, method, technology), then showcase relatable expamples and the **story** behind the idea
- Develop a **conceptual undestanding**, an intuition about the problem and the "tool" we think is appropriate in tackling it, and where does it fit in the methodology: 
    - Present the tool theoretically rigorous and sound, but **only where it matters**. 
    - More geometry and graphs over equations, more simulations and stories over proofs. Low-level details need careful, individual, hands-on study
    - Leverage previous mathematical, statistical, and domain knowledge
    - For the mathematically inclined, add some elements of abstract math to understand the underlying foundations of these methods and models
- Heavily use **simulations** as a safe playground that we control, to get a feel for the behavior of models and algorithms.
    - It forces us to declare our assumptions about the problem
    - Before we commit to a costly real-life experiment or modeling project, it is essential to know that a model works in principle for our application: is able to recover the parameters, causal structure and generalize beyond the sample.
- Discuss **practical applications** and challenges the firms face, from an insider's perspective. Those are our case-studies, outlined systematically in the following way:
    - First, we try to deeply understand the problem and frame it in "our" language of decision-making. We clarify our assumptions and reduce ambiguity
    - Then, we strip the problem to the simplest model, to illuminate some key aspect, like uncertainty in pricing and demand planning decisions. 
    - Then, and only then, we bring back all the realism, nuances, and complexities. Applications are based on realistic or real data, which can be messy, hard to access, biased and incomplete
    - In projects, we implement software solutions, with the main focus on the real-world challenges of deploying models and improving decision making. Interactive data visualization will help a lot in communicating persuasively.
    - Keep in mind best practices from reproducible research and software engineering, so that our apps and research code is easy to maintain and extend 

::: {.column-margin}
 In teaching and learning, I heavily rely on the Dreyfus model of **skill acquisition**, which describes the following stages: Novice, Competent, Proficient, Expert, Master. This 10 minutes [presentation](https://youtu.be/p8jFp1c4F2E?si=RtMuqW7Gyo2gDeIX) is well worth your time.
:::

::: {.callout-tip}
## Understand by building it (Feynman)!

I often find myself truly understanding something, only after I code it up and understand the mechanics of a model well, then try to think of how I would apply it in practice, in different contexts. This hints to the idea that we need a complementary computational background and set of tools, right from the beginning of higher education.

:::

Speaking about the **prerequisites**, there are some tools we have to dust off the shelves and cultivate an appreciation of their importance: linear algebra, calculus, probability theory and mathematical statistics. Not least, being competent in a programming language like Python or R is essential, so that we can focus on problem-solving.

::: {.column-margin}
Those prerequisites are placed in context of the business practice, with swift reviews and references to resources which should fill in all the gaps.
:::

At the same time, we have to gradually get **rid of the bad habits** that were accumulated: analyses which can't be reproduced, mechanically following a statistical procedure (because the flowchart of statistical tests said so, for example), jumping to a conclusion (as if there is only one, correct, textbook answer), rushing the learning process, handwaving to cover for a poorly articulated argument. On the other side of the spectrum, perfectionism doesn't help either, as this field is inherently iterative and experimental.

Therefore, we need to develop a set of processes and methodologies to iterate and improve effectively. We focus and pay close attention to the process of problem-solving: from formulation to modeling and operationalization.


## 10 Lessons in Humility

Whatever will be published here can't be the be-all-end-all bootcamp or course. But here are a few of my beliefs, which may persuade you to take the long road to your own development in AI instead of searching for "the tutorial":


- There is no shortcut to deep understanding
    - Of a domain, especially in an interdisciplinary setting
    - With communities engaged in an evolving dialogue
- There is no shortcut to being skillful at something
- The journey from novice to expert is not linear, however, the "interest compounds"
- The journey need not be painful, but it can be seriously playful, a source of wonder and meaning
- Without skin in the game, we can't claim we truly get something
- Without a vision which is flexible enough, but at the same time long-lived:
    - In the case of rigidity - there is a risk of being stuck, pursue obsessively, counterproductively the wrong thing
    - In the case of everything goes - there is a risk of wandering aimlessly and not finding a home
- Fixating on beliefs and propositional knowing (the facts!) is counterproductive. Which should put into question all written above
- Fixating on skills makes you lose the grasp of the big picture

